{
	"info": {
		"_postman_id": "bf9df905-7a3e-4620-8cf4-7e7d4ac9ecbd",
		"name": "APITestingAuto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38013027"
	},
	"item": [
		{
			"name": "Get all products list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for products list\r",
							"pm.test(\"Products list is not empty\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('products');\r",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/productsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"productsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all brands list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for brands list\r",
							"pm.test(\"Brands list is not empty\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('brands');\r",
							"    pm.expect(jsonData.brands).to.be.an('array').that.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://automationexercise.com/api/brandsList",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"brandsList"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test for content type\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test for products list\r",
							"pm.test(\"Products list is not empty\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('products');\r",
							"    pm.expect(jsonData.products).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Test for product information\r",
							"pm.test(\"Each product has id, name, and price\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.products.forEach(function (product) {\r",
							"        pm.expect(product).to.have.property('id');\r",
							"        pm.expect(product).to.have.property('name');\r",
							"        pm.expect(product).to.have.property('price');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "search_product",
							"value": "tshirt",
							"type": "text"
						},
						{
							"key": "search_products",
							"value": "top",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product without search_product parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for status code\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Validate that the response contains a specific error message\r",
							"pm.test(\"Response contains error message for missing search_product parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property('error');\r",
							"    pm.expect(jsonData.error).to.eql('Response Message: Bad request, search_product parameter is missing in POST request.');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "https://automationexercise.com/api/searchProduct",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"searchProduct"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create/Register User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Creating a User Account\r",
							"\tpm.test(\"User account created\", function () {\r",
							"\t\tpm.response.to.have.status(200);\r",
							"\t\tconst responseJson = pm.response.json();\r",
							"\t\tpm.expect(responseJson.message).to.eql(\"User created!\")\r",
							"\t});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{$randomUserName}}",
							"type": "text"
						},
						{
							"key": "email",
							"value": "random@email.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "random_pass",
							"type": "text"
						},
						{
							"key": "title (Mr, Mrs, Miss)",
							"value": "{{$randomNamePrefix}}",
							"type": "text"
						},
						{
							"key": "birth_date",
							"value": "{{$randomDatePast}}",
							"type": "text"
						},
						{
							"key": "birth_month",
							"value": "{{$randomMonth}}",
							"type": "text"
						},
						{
							"key": "birth_year",
							"value": "",
							"type": "text"
						},
						{
							"key": "firstname",
							"value": "{{$randomFirstName}}",
							"type": "text"
						},
						{
							"key": "lastname",
							"value": "{{$randomLastName}}",
							"type": "text"
						},
						{
							"key": "company",
							"value": "{{$randomCompanyName}}",
							"type": "text"
						},
						{
							"key": "address1",
							"value": "{{$randomStreetAddress}}",
							"type": "text"
						},
						{
							"key": "address2",
							"value": "",
							"type": "text"
						},
						{
							"key": "country",
							"value": "{{$randomCountry}}",
							"type": "text"
						},
						{
							"key": "zipcode",
							"value": "",
							"type": "text"
						},
						{
							"key": "state",
							"value": "",
							"type": "text"
						},
						{
							"key": "city",
							"value": "{{$randomCity}}",
							"type": "text"
						},
						{
							"key": "mobile_number",
							"value": "{{$randomPhoneNumber}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/createAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"createAccount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Login without email parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that response message is returned\r",
							"const responseData = pm.response.json();\r",
							"pm.test(\"Returns response message\", () => {\r",
							"\tpm.expect(responseData.message).to.eq(\"Bad request, email or password parameter is missing in POST request.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "pasword",
							"value": "random_pass",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/verifyLogin",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"verifyLogin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test for Deleting a User Account\r",
							"pm.test(\"Delete account\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"\tconst responseJson = pm.response.json();\r",
							"\tpm.expect(responseJson.message).to.eql(\"Account not found!\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "random@email.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "random_pass",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://automationexercise.com/api/deleteAccount",
					"protocol": "https",
					"host": [
						"automationexercise",
						"com"
					],
					"path": [
						"api",
						"deleteAccount"
					]
				}
			},
			"response": []
		}
	]
}